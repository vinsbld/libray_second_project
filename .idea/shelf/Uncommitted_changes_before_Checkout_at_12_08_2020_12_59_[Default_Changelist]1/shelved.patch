Index: microservice-mylibrary/src/main/java/com/bibliotheque/microservicemylibrary/batch/MyTaskTwo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bibliotheque.microservicemylibrary.batch;\r\n\r\n\r\nimport com.bibliotheque.microservicemylibrary.beans.UtilisateurBean;\r\nimport com.bibliotheque.microservicemylibrary.dao.IEmailDao;\r\nimport com.bibliotheque.microservicemylibrary.dao.IReservationDao;\r\nimport com.bibliotheque.microservicemylibrary.model.Email;\r\nimport com.bibliotheque.microservicemylibrary.model.Reservation;\r\nimport com.bibliotheque.microservicemylibrary.model.StateEnum;\r\nimport com.bibliotheque.microservicemylibrary.outils.EmailTypeReservation;\r\nimport com.bibliotheque.microservicemylibrary.proxies.IMicroserviceMyUsersProxy;\r\nimport org.apache.commons.lang.time.DateUtils;\r\nimport org.springframework.batch.core.StepContribution;\r\nimport org.springframework.batch.core.scope.context.ChunkContext;\r\nimport org.springframework.batch.core.step.tasklet.Tasklet;\r\nimport org.springframework.batch.repeat.RepeatStatus;\r\nimport org.springframework.mail.SimpleMailMessage;\r\nimport org.springframework.mail.javamail.JavaMailSenderImpl;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\npublic class MyTaskTwo implements Tasklet {\r\n\r\n\r\n    private final IReservationDao iReservationDao;\r\n    private final IEmailDao iEmailDao;\r\n    private final IMicroserviceMyUsersProxy iMicroserviceMyUsersProxy;\r\n    private final JavaMailSenderImpl sender;\r\n\r\n    public MyTaskTwo(IReservationDao iReservationDao, IEmailDao iEmailDao, IMicroserviceMyUsersProxy iMicroserviceMyUsersProxy, JavaMailSenderImpl sender) {\r\n        this.iReservationDao = iReservationDao;\r\n        this.iEmailDao = iEmailDao;\r\n        this.iMicroserviceMyUsersProxy = iMicroserviceMyUsersProxy;\r\n        this.sender = sender;\r\n    }\r\n\r\n\r\n    @Override\r\n    public RepeatStatus execute(StepContribution stepContribution, ChunkContext chunkContext) throws Exception {\r\n\r\n        System.out.println(\"debut du batch de réservation\");\r\n        SimpleDateFormat oldFormat = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n        Date dateDuJour = new Date();\r\n\r\n        List<Reservation> reservationList = iReservationDao.findByEmailEnvoyerAndStateEnums(true, StateEnum.enCours);\r\n        if (reservationList.size() > 0) {\r\n            for (Reservation r : reservationList) {\r\n                Date deadLine = DateUtils.addDays(r.getDateEnvoiEmail(), 2);\r\n                if (dateDuJour.after(deadLine)) {\r\n                    ArrayList<EmailTypeReservation> emailTypeReservations = new ArrayList<>();\r\n                    UtilisateurBean utilisateurBean = iMicroserviceMyUsersProxy.findById(r.getIdUtilisateur());\r\n                    emailTypeReservations.add(new EmailTypeReservation(utilisateurBean.getEmail(), r.getLivre().getTitre(), oldFormat.format(deadLine)));\r\n                    r.setStateEnums(StateEnum.annuler);\r\n                    iReservationDao.save(r);\r\n                    List<EmailTypeReservation> emailTypeReservationList = new ArrayList<>(emailTypeReservations);\r\n                    this.sendCancelRevival(emailTypeReservationList);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n       List<Reservation> reservations = iReservationDao.findByLivreAndStateEnumsOrderByDateDeReservationAsc(reservationList.get(0).getLivre(), StateEnum.enCours);\r\n        if (reservations.size() > 0){\r\n            Reservation reservation = reservations.get(0);\r\n            reservation.setDateEnvoiEmail(dateDuJour);\r\n            reservation.setEmailEnvoyer(true);\r\n            Date dateOfDeadLine = DateUtils.addDays(reservation.getDateEnvoiEmail(), 2);\r\n            ArrayList<EmailTypeReservation> emailTypeReservations1 = new ArrayList<>();\r\n            UtilisateurBean utilisateurBean = iMicroserviceMyUsersProxy.findById(reservation.getIdUtilisateur());\r\n            emailTypeReservations1.add(new EmailTypeReservation(utilisateurBean.getEmail(), reservation.getLivre().getTitre(), oldFormat.format(dateOfDeadLine)));\r\n            iReservationDao.save(reservation);\r\n            List<EmailTypeReservation> emailTypeReservationList1 = new ArrayList<>(emailTypeReservations1);\r\n            this.sendRevival(emailTypeReservationList1);\r\n        }\r\n\r\n\r\n        System.out.println(\"fin du batch de réservation\");\r\n        return RepeatStatus.FINISHED;\r\n    }\r\n\r\n\r\n    private void sendCancelRevival(List<EmailTypeReservation> emailTypeReservations){\r\n\r\n        Email email = iEmailDao.findByName(\"annulationReservation\");\r\n\r\n        for (EmailTypeReservation e : emailTypeReservations) {\r\n            String text = email.getContenu()\r\n                    .replace(\"[LIVRE_TITRE]\", e.getTitre())\r\n                    .replace(\"[DEADLINE]\", e.getDeadLine());\r\n            this.sendSimpleMessage(e.getEmail(), email.getObjet(), text);\r\n        }\r\n\r\n    }\r\n\r\n    private void sendRevival(List<EmailTypeReservation> emailTypeReservations){\r\n\r\n        Email email = iEmailDao.findByName(\"reservation\");\r\n\r\n        for (EmailTypeReservation e : emailTypeReservations) {\r\n            String text = email.getContenu()\r\n                    .replace(\"[LIVRE_TITRE]\", e.getTitre())\r\n                    .replace(\"[DEADLINE]\", e.getDeadLine());\r\n            this.sendSimpleMessage(e.getEmail(), email.getObjet(), text);\r\n        }\r\n\r\n    }\r\n\r\n    private void sendSimpleMessage(String email, String objet, String contenu) {\r\n        SimpleMailMessage message = new SimpleMailMessage();\r\n        message.setTo(email);\r\n        message.setSubject(objet);\r\n        message.setText(contenu);\r\n        sender.send(message);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- microservice-mylibrary/src/main/java/com/bibliotheque/microservicemylibrary/batch/MyTaskTwo.java	(revision 2a6911e346bfa095b37a13949e2b7ead6d7c875c)
+++ microservice-mylibrary/src/main/java/com/bibliotheque/microservicemylibrary/batch/MyTaskTwo.java	(date 1597228092120)
@@ -41,7 +41,7 @@
     @Override
     public RepeatStatus execute(StepContribution stepContribution, ChunkContext chunkContext) throws Exception {
 
-        System.out.println("debut du batch de réservation");
+
         SimpleDateFormat oldFormat = new SimpleDateFormat("dd/MM/yyyy");
         Date dateDuJour = new Date();
 
@@ -50,6 +50,7 @@
             for (Reservation r : reservationList) {
                 Date deadLine = DateUtils.addDays(r.getDateEnvoiEmail(), 2);
                 if (dateDuJour.after(deadLine)) {
+                    System.out.println("debut du batch annulation de réservation");
                     ArrayList<EmailTypeReservation> emailTypeReservations = new ArrayList<>();
                     UtilisateurBean utilisateurBean = iMicroserviceMyUsersProxy.findById(r.getIdUtilisateur());
                     emailTypeReservations.add(new EmailTypeReservation(utilisateurBean.getEmail(), r.getLivre().getTitre(), oldFormat.format(deadLine)));
@@ -57,6 +58,7 @@
                     iReservationDao.save(r);
                     List<EmailTypeReservation> emailTypeReservationList = new ArrayList<>(emailTypeReservations);
                     this.sendCancelRevival(emailTypeReservationList);
+                    System.out.println("fin du batch annulation de réservation");
                 }
             }
         }
@@ -64,6 +66,7 @@
 
        List<Reservation> reservations = iReservationDao.findByLivreAndStateEnumsOrderByDateDeReservationAsc(reservationList.get(0).getLivre(), StateEnum.enCours);
         if (reservations.size() > 0){
+            System.out.println("debut du batch réservation");
             Reservation reservation = reservations.get(0);
             reservation.setDateEnvoiEmail(dateDuJour);
             reservation.setEmailEnvoyer(true);
@@ -74,6 +77,7 @@
             iReservationDao.save(reservation);
             List<EmailTypeReservation> emailTypeReservationList1 = new ArrayList<>(emailTypeReservations1);
             this.sendRevival(emailTypeReservationList1);
+            System.out.println("fin du batch réservation");
         }
 
 
Index: microservice-mylibrary/src/main/resources/bootstrap.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.application.name=microservice-mylibrary\r\n\r\nspring.cloud.config.uri=http://localhost:9101\r\n\r\n#Actuator\r\nmanagement.endpoints.web.exposure.include=health,info,metrics\r\ninfo.app.version=1.0\r\n\r\n#Eureka\r\neureka.instance.health-check-url-path=/actuator/health\r\n\r\n#spring Batch\r\nspring.batch.job.enabled=false\r\nspring.batch.initialize-schema=always\r\nmicroservice.config.cron.job=*/60 * * * * *\r\n\r\n#spring mail config\r\nspring.mail.default-encoding=UTF-8\r\nspring.mail.protocol=smtp\r\nspring.mail.host=smtp.gmail.com\r\nspring.mail.username=oc.projet07@gmail.com\r\nspring.mail.password=123#A*5z\r\nspring.mail.port=587\r\nspring.mail.properties.mail.smtp.auth=true\r\nspring.mail.properties.mail.smtp.starttls.enable=true\r\nspring.mail.test-connection=false
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- microservice-mylibrary/src/main/resources/bootstrap.properties	(revision 2a6911e346bfa095b37a13949e2b7ead6d7c875c)
+++ microservice-mylibrary/src/main/resources/bootstrap.properties	(date 1597227879323)
@@ -12,7 +12,7 @@
 #spring Batch
 spring.batch.job.enabled=false
 spring.batch.initialize-schema=always
-microservice.config.cron.job=*/60 * * * * *
+microservice.config.cron.job=*/5 * * * * *
 
 #spring mail config
 spring.mail.default-encoding=UTF-8
Index: microservice-mylibrary/src/main/java/com/bibliotheque/microservicemylibrary/exeptions/CannotAddBorowingException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- microservice-mylibrary/src/main/java/com/bibliotheque/microservicemylibrary/exeptions/CannotAddBorowingException.java	(date 1597229977167)
+++ microservice-mylibrary/src/main/java/com/bibliotheque/microservicemylibrary/exeptions/CannotAddBorowingException.java	(date 1597229977167)
@@ -0,0 +1,11 @@
+package com.bibliotheque.microservicemylibrary.exeptions;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+@ResponseStatus(HttpStatus.NOT_ACCEPTABLE)
+public class CannotAddBorowingException extends RuntimeException {
+    public CannotAddBorowingException(String message){
+        super(message);
+    }
+}
