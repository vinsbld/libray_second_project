Index: microservice-myclient/src/main/java/com/bibliotheque/microservicemyclient/controller/ClientController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bibliotheque.microservicemyclient.controller;\r\n\r\nimport com.bibliotheque.microservicemyclient.bean.CopieBean;\r\nimport com.bibliotheque.microservicemyclient.bean.LivreBean;\r\nimport com.bibliotheque.microservicemyclient.bean.ReservationBean;\r\nimport com.bibliotheque.microservicemyclient.bean.UtilisateurBean;\r\nimport com.bibliotheque.microservicemyclient.exeptions.CannotExtendBorrowingException;\r\nimport com.bibliotheque.microservicemyclient.service.myLibrary.IMicroserviceMyLibraryProxyService;\r\nimport com.bibliotheque.microservicemyclient.service.myUsers.IMicroserviceMyUsersProxyService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\n\r\nimport java.util.List;\r\n\r\n@Controller\r\npublic class ClientController {\r\n\r\n    Logger logger = LoggerFactory.getLogger(this.getClass());\r\n\r\n    @Autowired\r\n    IMicroserviceMyUsersProxyService iMicroserviceMyUsersProxyService;\r\n\r\n    @Autowired\r\n    IMicroserviceMyLibraryProxyService iMicroserviceMyLibraryProxyService;\r\n\r\n    @GetMapping(\"/acceuil\")\r\n    public String acceuil(Model model){\r\n\r\n        logger.info(\"Page d'acceuil demandée\");\r\n\r\n        return \"acceuil\";\r\n\r\n    }\r\n\r\n    /*============== #Profil ======================*/\r\n    @GetMapping(\"/profil\")\r\n    public String afficherUnProfilUtilisateur(Model model){\r\n\r\n        UtilisateurBean utilisateurBean = (UtilisateurBean) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\r\n        model.addAttribute(\"utilisateurBean\", utilisateurBean);\r\n\r\n        List<ReservationBean>reservationBeans = iMicroserviceMyLibraryProxyService.afficherLaListeDesReservationsParUtilisateur(utilisateurBean.getId());\r\n        model.addAttribute(\"reservationBeans\", reservationBeans);\r\n\r\n        logger.info(\"L'utilisateur \"+utilisateurBean+\" id : \"+utilisateurBean.getId()+ \" consulte sa page profil\");\r\n\r\n        return \"Profil\";\r\n    }\r\n\r\n    /*============== #Livres ======================*/\r\n    //afficher une liste de tous les livres\r\n    @GetMapping(\"/livres\")\r\n    public String afficherUneListeDeLivres(Model model){\r\n\r\n       List<LivreBean> livreBeanList = iMicroserviceMyLibraryProxyService.ListeDeLivres();\r\n       model.addAttribute(\"livreBeanList\", livreBeanList);\r\n\r\n       logger.info(\"Liste de livre demandée\");\r\n\r\n       return \"Livres\";\r\n    }\r\n\r\n    //afficher un livre\r\n    @GetMapping(\"/livre/{id}\")\r\n    public String afficherUnLivre(Model model, @PathVariable(\"id\") Long id){\r\n\r\n        LivreBean livreBean = iMicroserviceMyLibraryProxyService.afficherUnLivre(id);\r\n        model.addAttribute(\"livreBean\", livreBean);\r\n\r\n        List<CopieBean> copieBeansDisponibles = iMicroserviceMyLibraryProxyService.afficherLesCopiesDisponibles(livreBean.getId());\r\n        model.addAttribute(\"copieBeansDisponibles\", copieBeansDisponibles);\r\n        model.addAttribute(\"nbCopiesDisponibles\", copieBeansDisponibles.size());\r\n\r\n        List<CopieBean> nbTTCopies= iMicroserviceMyLibraryProxyService.afficherLesCopiesDunLivre(id);\r\n        model.addAttribute(\"nbTTCopies\", nbTTCopies.size());\r\n\r\n        logger.info(\"Le livre \"+livreBean.getTitre()+\" est en consultation\");\r\n\r\n        return \"Livre\";\r\n    }\r\n\r\n    //faire une recherche de livre\r\n    @GetMapping(\"/recherche\")\r\n    public String rechercherUnLivre(Model model, @RequestParam(name = \"mc\", defaultValue = \"\") String mc){\r\n\r\n        logger.info(\"un utilisateur effectue une recherche de livre avec le mot clé : \"+ mc );\r\n\r\n        if (mc.isEmpty()){\r\n            List<LivreBean> livreBeanList = iMicroserviceMyLibraryProxyService.ListeDeLivres();\r\n            model.addAttribute(\"livreBeanList\", livreBeanList);\r\n        }\r\n        try {\r\n\r\n            List<LivreBean> livreBeanList = iMicroserviceMyLibraryProxyService.faireUneRechercheParTitre(\"%\" + mc + \"%\");\r\n            model.addAttribute(\"livreBeanList\", livreBeanList);\r\n            model.addAttribute(\"mc\", mc);\r\n        }catch (Exception e){\r\n            model.addAttribute(\"exception\",e);\r\n            throw new RuntimeException(\"Livre Introuvable\");\r\n        }\r\n\r\n        return \"/Livres\";\r\n    }\r\n\r\n    /*============== #Reservation ======================*/\r\n    //faire une reservation\r\n    @PostMapping(\"/reservation/{id}\")\r\n    public String demandeDeReservation(Model model, @PathVariable(\"id\")Long id){\r\n\r\n        UtilisateurBean utilisateurBean = (UtilisateurBean) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\r\n        utilisateurBean = iMicroserviceMyUsersProxyService.findById(utilisateurBean.getId());\r\n        model.addAttribute(\"utilisateurBean\", utilisateurBean);\r\n\r\n        CopieBean copieBean = iMicroserviceMyLibraryProxyService.afficherUneCopie(id);\r\n        model.addAttribute(\"copie\", copieBean);\r\n\r\n        iMicroserviceMyLibraryProxyService.demandeDeReservation(copieBean.getId(), utilisateurBean.getId());\r\n\r\n        logger.info(\"l'utilisateur : \"+utilisateurBean.getPseudo()+ \" id : \" +utilisateurBean.getId()+\" fait une demande de réservtion pour la copie isbn : \"+copieBean.getIsbn());\r\n\r\n        return \"redirect:/livres\";\r\n    }\r\n\r\n    //prolonger un pret\r\n    @PostMapping(\"/prolonger/{id}\")\r\n    public String prolongerLePret(Model model, @PathVariable(\"id\")Long id){\r\n\r\n        try {\r\n            UtilisateurBean utilisateurBean = (UtilisateurBean) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\r\n            model.addAttribute(\"utilisateurBean\", utilisateurBean);\r\n\r\n            ReservationBean reservationBean = iMicroserviceMyLibraryProxyService.afficherUneReservation(id);\r\n            iMicroserviceMyLibraryProxyService.prolongerPret(reservationBean.getId(), utilisateurBean.getId());\r\n\r\n            logger.info(\"l'utilisateur : \"+utilisateurBean.getPseudo()+\" a prolonger la réservation dont l' id est : \"+reservationBean.getId());\r\n\r\n            }catch (Exception e){\r\n                    e.printStackTrace();\r\n                    if (e instanceof CannotExtendBorrowingException){\r\n                        String message = e.getMessage();\r\n                        model.addAttribute(\"errorMessage\", message);\r\n                    }\r\n            }\r\n\r\n        return \"redirect:/profil\";\r\n\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- microservice-myclient/src/main/java/com/bibliotheque/microservicemyclient/controller/ClientController.java	(revision 8b7ae44969e2bb7550653ed62c43c5b6c7bb217d)
+++ microservice-myclient/src/main/java/com/bibliotheque/microservicemyclient/controller/ClientController.java	(date 1597756144313)
@@ -1,10 +1,11 @@
 package com.bibliotheque.microservicemyclient.controller;
 
-import com.bibliotheque.microservicemyclient.bean.CopieBean;
-import com.bibliotheque.microservicemyclient.bean.LivreBean;
-import com.bibliotheque.microservicemyclient.bean.ReservationBean;
-import com.bibliotheque.microservicemyclient.bean.UtilisateurBean;
-import com.bibliotheque.microservicemyclient.exeptions.CannotExtendBorrowingException;
+import com.bibliotheque.microservicemyclient.bean.*;
+import com.bibliotheque.microservicemyclient.dto.CopieBeanDTO;
+import com.bibliotheque.microservicemyclient.dto.EmpruntBeanDTO;
+import com.bibliotheque.microservicemyclient.dto.ReservationBeanDTO;
+import com.bibliotheque.microservicemyclient.exeptions.CannotAddBookingException;
+import com.bibliotheque.microservicemyclient.exeptions.CannotAddBorrowingException;
 import com.bibliotheque.microservicemyclient.service.myLibrary.IMicroserviceMyLibraryProxyService;
 import com.bibliotheque.microservicemyclient.service.myUsers.IMicroserviceMyUsersProxyService;
 import org.slf4j.Logger;
@@ -17,6 +18,7 @@
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.servlet.mvc.support.RedirectAttributes;
 
 import java.util.List;
 
@@ -47,8 +49,11 @@
         UtilisateurBean utilisateurBean = (UtilisateurBean) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
         model.addAttribute("utilisateurBean", utilisateurBean);
 
-        List<ReservationBean>reservationBeans = iMicroserviceMyLibraryProxyService.afficherLaListeDesReservationsParUtilisateur(utilisateurBean.getId());
-        model.addAttribute("reservationBeans", reservationBeans);
+        List<EmpruntBeanDTO> empruntBeans = iMicroserviceMyLibraryProxyService.afficherLaListeDesEmpruntsParUtilisateur(utilisateurBean.getId());
+        model.addAttribute("empruntList", empruntBeans);
+
+        List<ReservationBeanDTO> reservationBeans = iMicroserviceMyLibraryProxyService.afficherlesReservationsParUtilisateur(utilisateurBean.getId());
+        model.addAttribute("reservationList", reservationBeans);
 
         logger.info("L'utilisateur "+utilisateurBean+" id : "+utilisateurBean.getId()+ " consulte sa page profil");
 
@@ -79,8 +84,9 @@
         model.addAttribute("copieBeansDisponibles", copieBeansDisponibles);
         model.addAttribute("nbCopiesDisponibles", copieBeansDisponibles.size());
 
-        List<CopieBean> nbTTCopies= iMicroserviceMyLibraryProxyService.afficherLesCopiesDunLivre(id);
-        model.addAttribute("nbTTCopies", nbTTCopies.size());
+        List<CopieBeanDTO> copiesDunLivre = iMicroserviceMyLibraryProxyService.afficherLesCopiesDunLivre(id);
+        model.addAttribute("nbTTCopies", copiesDunLivre.size());
+        model.addAttribute("mCopies", copiesDunLivre);
 
         logger.info("Le livre "+livreBean.getTitre()+" est en consultation");
 
@@ -110,48 +116,97 @@
         return "/Livres";
     }
 
-    /*============== #Reservation ======================*/
-    //faire une reservation
-    @PostMapping("/reservation/{id}")
-    public String demandeDeReservation(Model model, @PathVariable("id")Long id){
+    /*============== #Emprunt ======================*/
+
+    //faire un emprunt
+    @PostMapping("/emprunter/{id}")
+    public String demandeEmprunt(Model model, @PathVariable("id")Long id, RedirectAttributes redirectAttributes){
 
         UtilisateurBean utilisateurBean = (UtilisateurBean) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
         utilisateurBean = iMicroserviceMyUsersProxyService.findById(utilisateurBean.getId());
         model.addAttribute("utilisateurBean", utilisateurBean);
 
-        CopieBean copieBean = iMicroserviceMyLibraryProxyService.afficherUneCopie(id);
+        CopieBeanDTO copieBean = iMicroserviceMyLibraryProxyService.afficherUneCopie(id);
         model.addAttribute("copie", copieBean);
 
-        iMicroserviceMyLibraryProxyService.demandeDeReservation(copieBean.getId(), utilisateurBean.getId());
+
+        try {
+            iMicroserviceMyLibraryProxyService.demandeEmprunt(copieBean.getId(), utilisateurBean.getId());
 
-        logger.info("l'utilisateur : "+utilisateurBean.getPseudo()+ " id : " +utilisateurBean.getId()+" fait une demande de réservtion pour la copie isbn : "+copieBean.getIsbn());
+            String validMessage = "votre demande d'emprunt a été réalisé avec succès.";
+            redirectAttributes.addFlashAttribute("validMessage", validMessage);
+            model.addAttribute("validMessage", validMessage);
 
-        return "redirect:/livres";
+            logger.info("l'utilisateur : "+utilisateurBean.getPseudo()+ " id : " +utilisateurBean.getId()+" fait une demande d'emprunt pour la copie isbn : "+copieBean.getIsbn());
+            return "redirect:/profil";
+        }
+        catch (Exception e) {
+            e.printStackTrace();
+            if (e instanceof CannotAddBorrowingException) {
+                String message = e.getMessage();
+                redirectAttributes.addFlashAttribute("messageErreur", message);
+            }
+        }
+
+        return "redirect:/livre/"+copieBean.getLivre().getId();
     }
 
     //prolonger un pret
     @PostMapping("/prolonger/{id}")
     public String prolongerLePret(Model model, @PathVariable("id")Long id){
 
-        try {
-            UtilisateurBean utilisateurBean = (UtilisateurBean) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
-            model.addAttribute("utilisateurBean", utilisateurBean);
+        UtilisateurBean utilisateurBean = (UtilisateurBean) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
+        model.addAttribute("utilisateurBean", utilisateurBean);
+
+        EmpruntBean empruntBean = iMicroserviceMyLibraryProxyService.afficherUnEmprunt(id);
+        iMicroserviceMyLibraryProxyService.prolongerEmprunt(empruntBean.getId(), utilisateurBean.getId());
+
+        logger.info("l'utilisateur : "+utilisateurBean.getPseudo()+" a prolonger le prêt dont l' id est : "+ empruntBean.getId());
+
+        return "redirect:/profil";
+
+    }
+
+    /*============== #Reservation ======================*/
+    @PostMapping("/reserver/{id}")
+    public String demandeDeReservation(Model model, @PathVariable("id") Long id, RedirectAttributes redirectAttributes){
+
+        UtilisateurBean utilisateurBean = (UtilisateurBean) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
+        utilisateurBean = iMicroserviceMyUsersProxyService.findById(utilisateurBean.getId());
+        model.addAttribute("utilisateurBean", utilisateurBean);
 
-            ReservationBean reservationBean = iMicroserviceMyLibraryProxyService.afficherUneReservation(id);
-            iMicroserviceMyLibraryProxyService.prolongerPret(reservationBean.getId(), utilisateurBean.getId());
+        LivreBean livreBean = iMicroserviceMyLibraryProxyService.afficherUnLivre(id);
+        model.addAttribute("livre", livreBean);
+
+        try {
+            iMicroserviceMyLibraryProxyService.demandeDeReservation(livreBean.getId(), utilisateurBean.getId());
 
-            logger.info("l'utilisateur : "+utilisateurBean.getPseudo()+" a prolonger la réservation dont l' id est : "+reservationBean.getId());
+            String validMessage = "votre demande de réservation a été réalisé avec succès.";
+            redirectAttributes.addFlashAttribute("validMessage", validMessage);
 
-            }catch (Exception e){
-                    e.printStackTrace();
-                    if (e instanceof CannotExtendBorrowingException){
-                        String message = e.getMessage();
-                        model.addAttribute("errorMessage", message);
-                    }
-            }
+            logger.info("l'utilisateur : "+utilisateurBean.getPseudo()+ " id : " +utilisateurBean.getId()+" fait une demande de réservtion pour le livre : "+livreBean.getTitre());
+
+            return "redirect:/profil";
+        }catch (Exception e){
+            e.printStackTrace();
+            if (e instanceof CannotAddBookingException){
+                String message = e.getMessage();
+                redirectAttributes.addFlashAttribute("messageErreur", message);
+            }
+        }
+
+        return "redirect:/livre/"+id;
+    }
+    @PostMapping("/annuler/reserver/{id}")
+    public String annulerReservation(Model model, @PathVariable("id") Long id, RedirectAttributes redirectAttributes){
 
-        return "redirect:/profil";
+        UtilisateurBean utilisateurBean = (UtilisateurBean) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
+        utilisateurBean = iMicroserviceMyUsersProxyService.findById(utilisateurBean.getId());
+        model.addAttribute("utilisateurBean", utilisateurBean);
 
+        iMicroserviceMyLibraryProxyService.annulerReservation(id, utilisateurBean.getId());
+
+        return "redirect:/livres";
     }
 
 
Index: microservice-myclient/src/main/resources/templates/Profil.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html xmlns:th=\"http://www.thymeleaf.org\"\r\n      xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\r\n      layout:decorate=\"~{Header}\">\r\n\r\n\r\n<head>\r\n    <meta charset=\"utf-8\" />\r\n\r\n    <meta content=\"width=device-width, initial-scale=1.0\" name=\"viewport\">\r\n    <meta content=\"\" name=\"keywords\">\r\n    <meta content=\"\" name=\"description\">\r\n\r\n\r\n    <!-- Google Fonts -->\r\n    <link\r\n            href=\"https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,700,700i|Poppins:300,400,500,700\"\r\n            rel=\"stylesheet\">\r\n\r\n    <!-- Bootstrap CSS File -->\r\n    <link href=\"/lib/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n\r\n    <!-- Libraries CSS Files -->\r\n    <link href=\"/lib/font-awesome/css/font-awesome.min.css\" rel=\"stylesheet\">\r\n    <link href=\"/lib/animate/animate.min.css\" rel=\"stylesheet\">\r\n\r\n\r\n    <!-- Main Stylesheet File -->\r\n    <link href=\"/css/style.css\" rel=\"stylesheet\" th:href=\"@{/css/style.css}\">\r\n\r\n</head>\r\n\r\n\r\n<!--==========================\r\n    Index section\r\n  ============================-->\r\n\r\n<body>\r\n\r\n<main id=\"main\">\r\n    <section th:id=\"page\">\r\n        <div class=\"page-container\">\r\n            <!--#Profil-->\r\n            <h1>Mon Profil</h1>\r\n            <div class=\"cstyle\">\r\n                <table class=\"table listTableDeco\">\r\n                    <tr>\r\n                        <td>Pseudo : </td>\r\n                        <td th:text=\"${utilisateurBean.pseudo}\"></td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Email : </td>\r\n                        <td th:text=\"${utilisateurBean.email}\"></td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n            <h1>Mes Réservations en cours</h1>\r\n            <div class=\"cstyle\">\r\n                <table class=\"table listTableDeco\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Date du prêt</th>\r\n                        <th>Date de fin du prêt</th>\r\n                        <th>Ouvrage emprunté</th>\r\n                        <th></th>\r\n                    </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                    <tr th:each=\"mlistReservations:${reservationBeans}\">\r\n                        <td th:text=\"${#dates.format(mlistReservations.dateDeDebutPret, 'dd/MM/yyyy')}\"></td>\r\n                        <td th:text=\"${#dates.format(mlistReservations.dateDeFinDuPret, 'dd/MM/yyyy')}\"></td>\r\n                        <td th:text=\"${mlistReservations.copieBean.livreBean.titre}\"></td>\r\n                        <td th:if=\"${(mlistReservations.isProlongerPret()==false) and (mlistReservations.dateDeFinDuPret>mlistReservations.getDateDuJour())}\">\r\n                            <form th:action=\"@{/prolonger/{id}(id=${mlistReservations.id})}\" method=\"post\">\r\n                                <div th:if=\"${errorMessage != null}\">\r\n                                    <span th:text=\"${errorMessage}\"></span>\r\n                                </div>\r\n                                <button type=\"submit\" class=\"btn-get-create btn-xs \">Prolonger</button>\r\n                            </form>\r\n                        </td>\r\n                        <td th:if=\"${mlistReservations.isProlongerPret()==true}\"><span style=\"color:gray\">Prolongation en cours</span></td>\r\n                        <td th:if=\"${mlistReservations.dateDeFinDuPret<mlistReservations.getDateDuJour()}\"><span style=\"color:red\">Délais dépassé !</span></td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </section>\r\n</main>\r\n<!-- #index -->\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- microservice-myclient/src/main/resources/templates/Profil.html	(revision 8b7ae44969e2bb7550653ed62c43c5b6c7bb217d)
+++ microservice-myclient/src/main/resources/templates/Profil.html	(date 1597756162265)
@@ -54,7 +54,18 @@
                     </tr>
                 </table>
             </div>
-            <h1>Mes Réservations en cours</h1>
+
+            <p></p>
+            <div th:if="${validMessage != null}" class="alert-success" role="alert">
+                <p th:text="${validMessage}"></p>
+            </div>
+            <div th:if="${messageErreur != null}" class="alert-warning" role="alert">
+                <p th:text="${messageErreur}"></p>
+            </div>
+            <p></p>
+
+            <h1>Mes Emprunts en cours</h1>
+
             <div class="cstyle">
                 <table class="table listTableDeco">
                     <thead>
@@ -65,22 +76,49 @@
                         <th></th>
                     </tr>
                     </thead>
-
                     <tbody>
-                    <tr th:each="mlistReservations:${reservationBeans}">
-                        <td th:text="${#dates.format(mlistReservations.dateDeDebutPret, 'dd/MM/yyyy')}"></td>
-                        <td th:text="${#dates.format(mlistReservations.dateDeFinDuPret, 'dd/MM/yyyy')}"></td>
-                        <td th:text="${mlistReservations.copieBean.livreBean.titre}"></td>
-                        <td th:if="${(mlistReservations.isProlongerPret()==false) and (mlistReservations.dateDeFinDuPret>mlistReservations.getDateDuJour())}">
-                            <form th:action="@{/prolonger/{id}(id=${mlistReservations.id})}" method="post">
-                                <div th:if="${errorMessage != null}">
-                                    <span th:text="${errorMessage}"></span>
-                                </div>
-                                <button type="submit" class="btn-get-create btn-xs ">Prolonger</button>
+                    <tr th:each="mEmprunt:${empruntList}">
+                            <td th:text="${#dates.format(mEmprunt.emprunt.dateDeDebutEmprunt, 'dd/MM/yyyy')}"></td>
+                            <td th:text="${#dates.format(mEmprunt.emprunt.dateDeFinEmprunt, 'dd/MM/yyyy')}"></td>
+                            <td th:text="${mEmprunt.livre.titre}"></td>
+                            <td th:if="${(mEmprunt.emprunt.isProlongerEmprunt() == false) and (mEmprunt.emprunt.dateDeFinEmprunt>mEmprunt.emprunt.getDateDuJour())}">
+                                <form th:action="@{/prolonger/{id}(id=${mEmprunt.copie.id})}" method="post">
+                                    <button type="submit" class="btn-get-create btn-xs ">Prolonger</button>
+                                </form>
+                            </td>
+                            <td th:if="${mEmprunt.emprunt.isProlongerEmprunt()==true}">
+                                <span style="color:gray">Prolongation en cours</span>
+                            </td>
+                            <td th:if="${mEmprunt.emprunt.dateDeFinEmprunt<mEmprunt.emprunt.getDateDuJour()}">
+                                <span style="color:red">Délais dépassé !</span>
+                            </td>
+                    </tr>
+                    </tbody>
+                </table>
+            </div>
+            <h1>Mes Réservations en cours</h1>
+            <div class="cstyle">
+                <table class="table listTableDeco">
+                    <thead>
+                    <tr>
+                        <th>Date de la demande</th>
+                        <th>Ouvrage reservé</th>
+                        <th>Date de retour prévue de l'ouvrage</th>
+                        <th>Position dans la liste d'attente</th>
+                        <th></th>
+                    </tr>
+                    </thead>
+                    <tbody>
+                    <tr th:each="mRs:${reservationList}">
+                        <td th:text="${#dates.format(mRs.reservation.dateDeReservation, 'dd/MM/yyyy')}"></td>
+                        <td th:text="${mRs.reservation.livreBean.titre}"></td>
+                        <td th:text="${#dates.format(mRs.livre.get().getDateRetourLaPlusProche(), 'dd/MM/yyyy')}"></td>
+                        <td th:text="${mRs.reservation.position}"></td>
+                        <td>
+                            <form th:action="@{/annuler/reserver/{id}(id=${mRs.reservation.id})}" method="post">
+                                <button type="submit" onclick="return confirm('Confirmer annulation')" class="btn-get-create">annuler</button>
                             </form>
                         </td>
-                        <td th:if="${mlistReservations.isProlongerPret()==true}"><span style="color:gray">Prolongation en cours</span></td>
-                        <td th:if="${mlistReservations.dateDeFinDuPret<mlistReservations.getDateDuJour()}"><span style="color:red">Délais dépassé !</span></td>
                     </tr>
                     </tbody>
                 </table>
