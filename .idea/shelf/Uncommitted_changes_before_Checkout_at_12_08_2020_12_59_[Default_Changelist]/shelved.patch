Index: microservice-mylibrary/src/main/java/com/bibliotheque/microservicemylibrary/controller/EmpruntController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bibliotheque.microservicemylibrary.controller;\r\n\r\nimport com.bibliotheque.microservicemylibrary.dto.EmpruntDTO;\r\nimport com.bibliotheque.microservicemylibrary.exeptions.CannotExtendBorrowingException;\r\nimport com.bibliotheque.microservicemylibrary.model.*;\r\nimport com.bibliotheque.microservicemylibrary.service.copie.ICopieService;\r\nimport com.bibliotheque.microservicemylibrary.service.emprunt.IEmpruntService;\r\nimport com.bibliotheque.microservicemylibrary.service.livre.ILivreService;\r\nimport com.bibliotheque.microservicemylibrary.service.reservation.IReservationService;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.*;\r\n\r\n\r\n@RestController\r\npublic class EmpruntController {\r\n\r\n    Logger logger = LoggerFactory.getLogger(this.getClass());\r\n\r\n    @Autowired\r\n    private IEmpruntService iEmpruntService;\r\n\r\n    @Autowired\r\n    private ICopieService iCopieService;\r\n\r\n    @Autowired\r\n    private ILivreService iLivreService;\r\n\r\n    @Autowired\r\n    private IReservationService iReservationService;\r\n\r\n\r\n    @RequestMapping(value = \"/listeDesEmprunts/{id}\", method = RequestMethod.GET)\r\n    public List<EmpruntDTO> afficherLaListeDesEmpruntsParUtilisateur(@PathVariable(\"id\") Long id){\r\n\r\n        List<Emprunt> emprunts = iEmpruntService.findAllByIdUtilisateur(id);\r\n        List<EmpruntDTO> empruntDTOS = new ArrayList<>();\r\n\r\n        for (Emprunt e : emprunts) {\r\n            EmpruntDTO eDTO = new EmpruntDTO();\r\n            eDTO.setEmprunt(e);\r\n            Optional<Copie> c = iCopieService.findById(e.getCopie().getId());\r\n            eDTO.setCopie(c.get());\r\n            Optional<Livre> l = iLivreService.findById(e.getCopie().getLivre().getId());\r\n            eDTO.setLivre(l.get());\r\n            empruntDTOS.add(eDTO);\r\n        }\r\n\r\n        logger.info(\"demande la liste des emprunts pour un utilisateur\");\r\n        return empruntDTOS;\r\n    }\r\n\r\n    @RequestMapping(value = \"/emprunt/{id}\")\r\n    public Optional<Emprunt> afficherUnEmprunt(@PathVariable(\"id\")Long id){\r\n        Optional<Emprunt>emprunt = iEmpruntService.findById(id);\r\n        logger.info(\"detail d'un emprunt demandée\");\r\n        return emprunt;\r\n\r\n    }\r\n\r\n    @RequestMapping(value = \"/emprunter/{id}\", method = RequestMethod.POST)\r\n    public void demandeEmprunt(@PathVariable Long id, @RequestParam Long idUtilisateur){\r\n\r\n        Date date = new Date(Calendar.getInstance().getTime().getTime());\r\n        Copie copie = iCopieService.findById(id).get();\r\n        Emprunt emprunt = new Emprunt();\r\n\r\n        List<Reservation> reservations = iReservationService.findByLivreAndStateEnumsOrderByDateDeReservationAsc(copie.getLivre(), StateEnum.enCours);\r\n        if (reservations.size() > 0){\r\n            Reservation reservation = reservations.get(0);\r\n            if (reservation.getIdUtilisateur().equals(emprunt.getIdUtilisateur())){\r\n                copie.setDisponible(false);\r\n                iCopieService.save(copie);\r\n                emprunt.setCopie(copie);\r\n                emprunt.setDateDeDebutEmprunt(date);\r\n                emprunt.setDateDeFinEmprunt(iEmpruntService.add4Weeks(date));\r\n                emprunt.setProlongerEmprunt(false);\r\n                emprunt.setIdUtilisateur(reservation.getIdUtilisateur());\r\n                iEmpruntService.save(emprunt);\r\n                reservation.setStateEnums(StateEnum.terminer);\r\n                iReservationService.save(reservation);\r\n                logger.info(\"demande emprunt à partir de la reservation :\"+ reservation.getId() +\" de l'utilisateur : \"+reservation.getIdUtilisateur());\r\n            }\r\n        }else {\r\n            copie.setDisponible(false);\r\n            iCopieService.save(copie);\r\n            emprunt.setCopie(copie);\r\n            emprunt.setDateDeDebutEmprunt(date);\r\n            emprunt.setDateDeFinEmprunt(iEmpruntService.add4Weeks(date));\r\n            emprunt.setProlongerEmprunt(false);\r\n            emprunt.setIdUtilisateur(idUtilisateur);\r\n            iEmpruntService.save(emprunt);\r\n            logger.info(\"demande emprunt pour une copie : \"+emprunt.getCopie().getIsbn()+ \"du livre : \"+emprunt.getCopie().getLivre().getTitre()+\"pour l'utilisteur : \"+emprunt.getIdUtilisateur());\r\n        }\r\n    }\r\n\r\n\r\n    @RequestMapping(value = \"/prolonger/{id}\", method = RequestMethod.POST)\r\n    public void prolongerEmprunt(@PathVariable Long id,@RequestParam Long idUtilisateur){\r\n\r\n        Date date = new Date(Calendar.getInstance().getTime().getTime());\r\n        Emprunt emprunt = iEmpruntService.findById(id).get();\r\n\r\n        //verifier si la date de fin du prêt n'est pas dépasser\r\n        if (emprunt.getDateDeFinEmprunt().after(date)){\r\n            throw new CannotExtendBorrowingException(\"prolongementException01\");\r\n        }\r\n\r\n        //verfier si il n'y a pas déjà une prolongation en cours pour ce prêt\r\n        if (emprunt.isProlongerEmprunt()==true){\r\n            throw new CannotExtendBorrowingException(\"prolongementException02\");\r\n        }\r\n\r\n        emprunt.setIdUtilisateur(idUtilisateur);\r\n        emprunt.setProlongerEmprunt(true);\r\n        emprunt.setDateDeFinEmprunt(iEmpruntService.add4Weeks(emprunt.getDateDeFinEmprunt()));\r\n        logger.info(\"demande de prolongation d'un prêt\");\r\n        iEmpruntService.save(emprunt);\r\n    }\r\n\r\n    @RequestMapping(value = \"/retour/{id}\", method = RequestMethod.POST)\r\n    public void retournerEmprunt(@PathVariable Long id,@RequestParam Long idUtilisateur){\r\n\r\n        Date date = new Date(Calendar.getInstance().getTime().getTime());\r\n        Emprunt emprunt = iEmpruntService.findById(id).get();\r\n        emprunt.setIdUtilisateur(idUtilisateur);\r\n        emprunt.setDateRetour(date);\r\n        emprunt.setRendu(true);\r\n        iEmpruntService.save(emprunt);\r\n\r\n        List<Reservation> reservations = iReservationService.findByLivreAndStateEnumsOrderByDateDeReservationAsc(emprunt.getCopie().getLivre(), StateEnum.enCours);\r\n        if (reservations.size() > 0){\r\n            emprunt.getCopie().setDisponible(false);\r\n            iEmpruntService.save(emprunt);\r\n            Reservation reservation = reservations.get(0);\r\n            reservation.setDateEnvoiEmail(date);\r\n            reservation.setEmailEnvoyer(true);\r\n            reservation.getIdUtilisateur();\r\n            iReservationService.save(reservation);\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- microservice-mylibrary/src/main/java/com/bibliotheque/microservicemylibrary/controller/EmpruntController.java	(revision 2a6911e346bfa095b37a13949e2b7ead6d7c875c)
+++ microservice-mylibrary/src/main/java/com/bibliotheque/microservicemylibrary/controller/EmpruntController.java	(date 1597229977157)
@@ -1,6 +1,7 @@
 package com.bibliotheque.microservicemylibrary.controller;
 
 import com.bibliotheque.microservicemylibrary.dto.EmpruntDTO;
+import com.bibliotheque.microservicemylibrary.exeptions.CannotAddBorowingException;
 import com.bibliotheque.microservicemylibrary.exeptions.CannotExtendBorrowingException;
 import com.bibliotheque.microservicemylibrary.model.*;
 import com.bibliotheque.microservicemylibrary.service.copie.ICopieService;
@@ -68,6 +69,15 @@
         Copie copie = iCopieService.findById(id).get();
         Emprunt emprunt = new Emprunt();
 
+        //verifier si l'utilisateur n'a pas déjà un emprunt en cours pour cet ouvrage
+        List<Emprunt> emprunts = iEmpruntService.findAllByIdUtilisateur(idUtilisateur);
+        if (emprunts.size() > 0){
+            if (emprunts.contains(copie.getLivre().getId())){
+                throw new CannotAddBorowingException("empruntException01");
+            }
+        }
+
+
         List<Reservation> reservations = iReservationService.findByLivreAndStateEnumsOrderByDateDeReservationAsc(copie.getLivre(), StateEnum.enCours);
         if (reservations.size() > 0){
             Reservation reservation = reservations.get(0);
